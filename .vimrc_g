set encoding=utf-8
set fileencodings=ucs-bom,utf-8
source $HOME/.vimrcg/vim_use_utf8_symbols
filetype off 
let $VIMHOME=expand('<sfile>:p:h:h')
if has('win32') || has('win64')
	let $VIMHOME = $VIM."/vimfiles"
	set directory=$VIM."\temp"
	set backupdir=$VIM."\temp"
	set backupskip=/tmp/*,/private/tmp/* 
	let $TEMP = $VIM."\temp"
	let $TMPDIR = $VIM."\temp" 
    set rtp+=$VIMHOME/bundle/vundle/ 
    call vundle#rc('$VIMHOME/bundle/')
	let g:Perl_GlobalTemplateFile = $VIMHOME.'\bundle\vim-plugins\perl-support\templates\Templates'
	let g:Perl_LocalTemplateFile = $HOME.'\.vimrcg\perl-templates\Templates'
	"autocmd FuncUndefined * exe 'runtime autoload/' . expand('<afile>') . '.vim'
else
	set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp 
	set backupskip=/tmp/*,/private/tmp/* 
	set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp 
	set rtp+=~/.vim/bundle/vundle/
	call vundle#rc()
	let $VIMHOME = $HOME."/.vim"
	let g:Perl_GlobalTemplateFile = $HOME.'/.vim/bundle/vim-plugins/perl-support/templates/Templates'
	let g:Perl_LocalTemplateFile = $HOME.'/.vimrcg/perl-templates/Templates'
endif

"-------------------------------------------------------------------------------
" Plugins list
"-------------------------------------------------------------------------------
"репозитории на github
Bundle	'gmarik/vundle'
Bundle  'scrooloose/nerdtree'
Bundle	'mattn/emmet-vim'
Bundle	'tpope/vim-surround'
Bundle	'Bravo13/vim-perl-colorscheme'
Bundle	'Bravo13/vim-plugins'
Bundle	'altercation/vim-colors-solarized'
Bundle	'jiangmiao/auto-pairs'
Bundle	'airblade/vim-gitgutter'
Bundle	'tpope/vim-fugitive'
Bundle	'xolox/vim-session'
Bundle	'xolox/vim-misc'
"Bundle	'fholgado/minibufexpl.vim'

"репозитории vim/scripts
"Bundle 'L9'
"Bundle	'perl-support.vim'
Bundle	'taglist.vim'

"git репозитории (не на github)
"Bundle 'git://git.wincent.com/command-t.git'

"локальные git репозитории(если работаете над собственным плагином)
"Bundle 'file:///Users/gmarik/path/to/plugin'

filetype plugin indent on

function MyTabLine()
	let tabline = ''

	" Формируем tabline для каждой вкладки -->
	for i in range(tabpagenr('$'))
		" Подсвечиваем заголовок выбранной в данный момент вкладки.
		if i + 1 == tabpagenr()
			let tabline .= '%#TabLineSel#'
		else
			let tabline .= '%#TabLine#'
		endif

		" Устанавливаем номер вкладки
		let tabline .= '%' . (i + 1) . 'T'

		" Получаем имя вкладки
		let tabline .= ' %{MyTabLabel(' . (i + 1) . ')} |'
	endfor
	" Формируем tabline для каждой вкладки <--

	" Заполняем лишнее пространство
	let tabline .= '%#TabLineFill#%T'

	" Выровненная по правому краю кнопка закрытия вкладки
	if tabpagenr('$') > 1
		let tabline .= '%=%#TabLine#%999XX'
	endif

	return tabline
endfunction

function MyTabLabel(n)
	let label = ''
	let buflist = tabpagebuflist(a:n)

	" Имя файла и номер вкладки -->
	"let label = substitute(bufname(buflist[tabpagewinnr(a:n) - 1]), '.*/', '', '')
	let label =  pathshorten(bufname(buflist[tabpagewinnr(a:n) - 1]))

	if label == ''
		let label = '[No Name]'
	endif

	let label .= ' (' . a:n . ')'
	" Имя файла и номер вкладки <--

	" Определяем, есть ли во вкладке хотя бы один
	" модифицированный буфер.
	" -->
	for i in range(len(buflist))
		if getbufvar(buflist[i], "&modified")
			let label = '[+] ' . label
			break
		endif
	endfor
	" <--

	return label
endfunction

function MyGuiTabLabel()
	return '%{MyTabLabel(' . tabpagenr() . ')}'
endfunction

function! Plugins()
	if exists(':GitGutterEnable')
		nmap <F2> :GitGutterToggle<CR>
		GitGutterLineHighlightsEnable
	endif
	if exists(':NERDTree')
		"au VimEnter * NERDTreeToggle D:/web/sites
		" hit <F3> to toggle NERDTree
		exe "nmap <F3> :NERDTreeToggle<CR>"
		
		let g:nerdtree_tabs_open_on_gui_startup=1
	endif

	if exists(':TlistToggle')
		" hit <F8> to show/hide taglist
		" hit <F8> to show/hide taglist
		nnoremap <silent> <F8> :TlistToggle<CR>
	endif
endfunction

function! InitPerlWork()
	colorscheme uperl
	
	"Make foldings
	nmap zC ^f{v%zf

endfunction

if has('perl')
	function! PerlCurrentSub()
	perl << EOP
		use strict;
		sub current_sub {
			my $curwin = $main::curwin;
			my $curbuf = $main::curbuf;

			my @document = map { $curbuf->Get($_)  } 0 .. $curbuf->Count;
			my ( $line_number, $column   ) = $curwin->Cursor;

			my $sub_name = '(not in sub)';
			my $package = 'main';
			for my $i ( reverse ( 1 .. $line_number  -1  )  ) {
				my $line = $document[$i];
				if ( $line =~ /^\s*sub\s+(\w+)\b/  ) {
					$sub_name = $1;
					last;
				}
			}
			for my $i ( reverse ( 0 .. $line_number -1   )  ) {
				my $line = $document[$i];
				if ( $line =~ /^\s*package\s+(\w+)\b/  ) {
					$package = $1;
					last;
				}
			}
			VIM::DoCommand "let subName='Sub: $package::$sub_name '";
		}
EOP
	endfunction

	function! StatusLineIndexLine()
		call PerlCurrentSub()
		perl current_sub()
		if &filetype == 'perl'
			return subName
		else
			return ''
		endif
	endfunction
endif

"-------------------------------------------------------------------------------
" Use Vim settings, rather then Vi settings.
" This must be first, because it changes other options as a side effect.
"-------------------------------------------------------------------------------
set nocompatible

"-------------------------------------------------------------------------------
" Enable file type detection. Use the default filetype settings.
" Also load indent files, to automatically do language-dependent indenting.
"-------------------------------------------------------------------------------
filetype  plugin on
filetype  indent on

syntax on

set number
set t_Co=256
try 
	let g:solarized_termcolors=256
	set background=dark
	colorscheme solarized
catch
	colorscheme blue
endtry

"remove toolbar
set guioptions-=T

set guifont=Courier_New:h12

" Maximize window
" call libcallnr('maximize', 'Maximize', 1) 

" switch higlight no matter the previous state
nmap <F4> :set hls! <cr>
" hit '/' highlights then enter search mode
nnoremap / :set hlsearch<cr>/

autocmd FileType perl call InitPerlWork()

function! SetStatusline()
	set laststatus=2
	set statusline=%f%m%r%h%w\ %y\ enc:%{&enc}\ ff:%{&ff}\ fenc:%{&fenc}%=(ch:%3b\ hex:%2B)\ col:%2c\ line:%2l/%L\ 
	if has('perl')
		set statusline+=%(\%{StatusLineIndexLine()}%)
	endif
	set statusline+=[%2p%%]%{fugitive#statusline()}
endfunction

call SetStatusline()


"-------------------------------------------------------------------------------
" Various settings
"-------------------------------------------------------------------------------
set autoindent                  " copy indent from current line
set autoread                    " read open files again when changed outside Vim
set autowrite                   " write a modified buffer on each :next , ...
set backspace=indent,eol,start  " backspacing over everything in insert mode
set backup                      " keep a backup file
set browsedir=current           " which directory to use for the file browser
set complete+=k                 " scan the files given with the 'dictionary' option
set history=50                  " keep 50 lines of command line history
set hlsearch                    " highlightthe last used search pattern
set incsearch                   " do incremental searching
set listchars=tab:>.,eol:\$     " strings to use in 'list' mode
set mouse=a                     " enable the use of the mouse
set nowrap                      " do not wrap lines
set ruler                       " show the cursor position all the time
set shiftwidth=2                " number of spaces to use for each step of indent
set showcmd                     " display incomplete commands
set smartindent                 " smart autoindenting when starting a new line
set tabstop=2                   " number of spaces that a <Tab> counts for
set visualbell                  " visual bell instead of beeping
set wildignore=*.bak,*.o,*.e,*~ " wildmenu: ignore these extensions
set wildmenu                    " command-line completion in an enhanced mode
set backup 											" setup for backup swap files location
set writebackup
"set showtabline=0
set tabline=%!MyTabLine()
set guitablabel=%!MyGuiTabLabel()
"-------------------------------------------------------------------------------
"  highlight paired brackets
"-------------------------------------------------------------------------------
highlight MatchParen ctermbg=blue guibg=lightyellow

"-------------------------------------------------------------------------------
"  MiniBufExpl
"-------------------------------------------------------------------------------
let g:miniBufExplUseSingleClick = 1

autocmd VimEnter * :call Plugins()

" Shortcuts
let mapleader = ","
" Disable <Arrow keys>
" Warning: nightmare mode!
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Navigate with <Ctrl>-hjkl in Insert mode
imap <C-h> <C-o>h
imap <C-j> <C-o>j
imap <C-k> <C-o>k
imap <C-l> <C-o>l

" Switch splits
nmap <C-h> <C-W>h
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-l> <C-W>l

" n and N
" Search matches are always in center
nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz

" Navigate through wrapped lines
noremap j gj
noremap k gk
