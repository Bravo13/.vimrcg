set encoding=utf-8
set fileencodings=ucs-bom,utf-8
filetype off 
let $VIMHOME=expand('<sfile>:p:h:h')
let g:Perl_LocalTemplateFile = $HOME.'\.vimrcg\perl-templates\Templates'
if has('win32') || has('win64')
    set rtp+=$VIM/bundle/vundle/ 
    call vundle#rc('$VIM/bundle/')
	let $VIMHOME = $VIM."/vimfiles"
else
    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()
	let $VIMHOME = $HOME."/.vim"
endif

"-------------------------------------------------------------------------------
" Plugins list
"-------------------------------------------------------------------------------
"репозитории на github
Bundle	'gmarik/vundle'
Bundle  'scrooloose/nerdtree'
Bundle	'mattn/emmet-vim'
Bundle	'tpope/vim-surround'
Bundle	'Bravo13/vim-perl-colorscheme'
"Bundle	'Bravo13/vim-plugins'
Bundle	'altercation/vim-colors-solarized'
Bundle	'jiangmiao/auto-pairs'

"репозитории vim/scripts
"Bundle 'L9'
Bundle	'perl-support.vim'
Bundle	'taglist.vim'

"git репозитории (не на github)
"Bundle 'git://git.wincent.com/command-t.git'

"локальные git репозитории(если работаете над собственным плагином)
"Bundle 'file:///Users/gmarik/path/to/plugin'

filetype plugin indent on

function! Plugins()
	if exists(':NERDTree')
		"au VimEnter * NERDTreeToggle D:/web/sites
		" hit <F3> to toggle NERDTree
		exe "nmap <F3> :NERDTreeToggle<CR>"
		
		let g:nerdtree_tabs_open_on_gui_startup=1
	endif

	if exists(':TlistToggle')
		" hit <F8> to show/hide taglist
		nnoremap <silent> <F8> :TlistToggle<CR>
	endif
endfunction

"-------------------------------------------------------------------------------
" Use Vim settings, rather then Vi settings.
" This must be first, because it changes other options as a side effect.
"-------------------------------------------------------------------------------
set nocompatible

"-------------------------------------------------------------------------------
" Enable file type detection. Use the default filetype settings.
" Also load indent files, to automatically do language-dependent indenting.
"-------------------------------------------------------------------------------
filetype  plugin on
filetype  indent on

syntax on

set number
set t_Co=256
try 
	let g:solarized_termcolors=256
	set background=dark
	colorscheme solarized
catch
	colorscheme blue
endtry

"remove toolbar
set guioptions-=T

set guifont=Courier_New:h12

" Maximize window
" call libcallnr('maximize', 'Maximize', 1) 

" switch higlight no matter the previous state
nmap <F4> :set hls! <cr>
" hit '/' highlights then enter search mode
nnoremap / :set hlsearch<cr>/

autocmd FileType perl colorscheme uperl
autocmd FuncUndefined * exe 'runtime autoload/' . expand('<afile>') . '.vim'

"-------------------------------------------------------------------------------
" Various settings
"-------------------------------------------------------------------------------
set autoindent                  " copy indent from current line
set autoread                    " read open files again when changed outside Vim
set autowrite                   " write a modified buffer on each :next , ...
set backspace=indent,eol,start  " backspacing over everything in insert mode
set backup                      " keep a backup file
set browsedir=current           " which directory to use for the file browser
set complete+=k                 " scan the files given with the 'dictionary' option
set history=50                  " keep 50 lines of command line history
set hlsearch                    " highlightthe last used search pattern
set incsearch                   " do incremental searching
set listchars=tab:>.,eol:\$     " strings to use in 'list' mode
set mouse=a                     " enable the use of the mouse
set nowrap                      " do not wrap lines
set popt=left:8pc,right:3pc     " print options
set ruler                       " show the cursor position all the time
set shiftwidth=2                " number of spaces to use for each step of indent
set showcmd                     " display incomplete commands
set smartindent                 " smart autoindenting when starting a new line
set tabstop=2                   " number of spaces that a <Tab> counts for
set visualbell                  " visual bell instead of beeping
set wildignore=*.bak,*.o,*.e,*~ " wildmenu: ignore these extensions
set wildmenu                    " command-line completion in an enhanced mode

"-------------------------------------------------------------------------------
"  highlight paired brackets
"-------------------------------------------------------------------------------
highlight MatchParen ctermbg=blue guibg=lightyellow

autocmd VimEnter * :call Plugins()

" Shortcuts
let mapleader = ","
" Disable <Arrow keys>
" Warning: nightmare mode!
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Navigate with <Ctrl>-hjkl in Insert mode
imap <C-h> <C-o>h
imap <C-j> <C-o>j
imap <C-k> <C-o>k
imap <C-l> <C-o>l

" Switch splits
nmap <C-h> <C-W>h
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-l> <C-W>l

" n and N
" Search matches are always in center
nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz

" Navigate through wrapped lines
noremap j gj
noremap k gk
